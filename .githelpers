#!/bin/bash

# Log output:
#
# Based on Gary Bernhardt's .githelpers
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ar)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"
columns=$(tput cols)
SHOWCOL=$((columns+30))
FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

pretty_git_log() {
    git log --graph --abbrev-commit --date=relative --pretty="tformat:${FORMAT}" $* |
        # Repalce (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # Line columns up based on } delimiter
        column -s '}' -t |
        # delete everything after COLUMNS to prevent horizontal paging. stupid less...
        cut -c -$SHOWCOL |
        # Page only if we need to
        less -FXRS -h80
}

dcommit_from_master(){
    branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/');
    if [ "$branch" == "(master)" ]; then
        echo "(master) git svn dcommit";
        git svn dcommit
    else
        echo "Will not dcommit from $branch";
    fi
}

add_wildcard(){
    git ls-files --modified | grep -i $1 | xargs -I{} git add {}
    git ls-files --others --exclude-standard | grep -i $1 | xargs -I{} git add {}
    git ls-files --deleted | grep -i $1 | xargs -I{} git rm {}
}

what_the_hell_just_happened(){
    ref=${1:-"HEAD"}

    old=$ref@{1}
    new=$ref

    log() {
        git log --graph --pretty=short -1 $1
    }

    echo "Old revision:"
    log $old
    echo
    echo "New revision:"
    log $new
    echo
    echo "Changes:"
    git diff --stat --summary $old $new
}

current_pulls_into_here(){

    # need underscore? npm install -g underscore-cli
    _underscore() { underscore "$@" 2> /dev/null; }

    current_repo="$(git config --get remote.origin.url | sed 's/github.com\//api.github.com\/repos\//')"
    current_branch="$(git rev-parse --abbrev-ref HEAD)"

    curl --silent -H "Authorization: token $GITHUB_API_TOKEN" $current_repo/pulls \
    | _underscore filter "value.state === 'open' && value.base.ref === \"$current_branch\"" \
    | _underscore map "value.html_url + ', ' + value.state + ', ' + value.head.ref + ', ' + value.created_at"

}

