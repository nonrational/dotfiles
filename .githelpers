#!/bin/bash

# Log output:
#
# Based on Gary Bernhardt's .githelpers
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ar)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"
columns=$(tput cols)
SHOWCOL=$((columns+30))
FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

pretty_git_log() {
    git log --graph --abbrev-commit --date=relative --pretty="tformat:${FORMAT}" $* |
        # Repalce (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # Line columns up based on } delimiter
        column -s '}' -t |
        # delete everything after COLUMNS to prevent horizontal paging. stupid less...
        cut -c -$SHOWCOL |
        # Page only if we need to
        less -FXRS -h80
}

add_wildcard(){
    git ls-files --modified | grep -i $1 | xargs -I{} git add {}
    git ls-files --others --exclude-standard | grep -i $1 | xargs -I{} git add {}
    git ls-files --deleted | grep -i $1 | xargs -I{} git rm {}
}

what_the_hell_just_happened(){
    ref=${1:-"HEAD"}

    old=$ref@{1}
    new=$ref

    log() {
        git log --graph --pretty=short -1 $1
    }

    echo "Old revision:"
    log $old
    echo
    echo "New revision:"
    log $new
    echo
    echo "Changes:"
    git diff --stat --summary $old $new
}


TIMESINCE="function timeSince(date) {\
    var seconds = Math.floor((new Date() - date) / 1000);\
    var interval = Math.floor(seconds / 31536000);\
    if (interval > 1) return interval + \" years\";\
    interval = Math.floor(seconds / 2592000);\
    if (interval > 1) return interval + \" months\";\
    interval = Math.floor(seconds / 86400);\
    if (interval > 1) return interval + \" days\";\
    interval = Math.floor(seconds / 3600);\
    if (interval > 1) return interval + \" hours\";\
    interval = Math.floor(seconds / 60);\
    if (interval > 1) return interval + \" minutes\";\
    return Math.floor(seconds) + \" seconds\";\
}";

current_pulls_into_here(){

    # need underscore? npm install -g underscore-cli
    _underscore() { underscore "$@" 2> /dev/null; }

    current_repo="$(git config --get remote.origin.url | sed 's/github.com\//api.github.com\/repos\//')"
    current_branch="$(git rev-parse --abbrev-ref HEAD)"

    curl --silent -H "Authorization: token $GITHUB_API_TOKEN" $current_repo/pulls \
    | _underscore filter "value.state === 'open' && value.base.ref === \"$current_branch\"" \
    | _underscore map "$TIMESINCE;; value.html_url + ' (' + timeSince(new Date(value.created_at)) +') ' + value.base.ref + ' <~ ' + value.head.ref " --outfmt 'text'

}

current_pulls_into_here_with_colorful_status(){

    local      YELLOW="\033[0;33m"
    local         RED="\033[0;31m"
    local       GREEN="\033[0;32m"
    local  LIGHT_GRAY="\033[0;37m"

    # need underscore? npm install -g underscore-cli
    _underscore() { underscore "$@" 2> /dev/null; }

    repo_here="$(git config --get remote.origin.url | sed 's/github.com\//api.github.com\/repos\//')"
    branch_here="$(git rev-parse --abbrev-ref HEAD)"

    current_branch=${1:-$branch_here}
    current_repo=${2:-$repo_here}

    for pr in $(curl --silent -H "Authorization: token $GITHUB_API_TOKEN" $current_repo/pulls \
        | _underscore filter "value.state === 'open' && value.base.ref === \"$current_branch\"" \
        | _underscore map "$TIMESINCE;; value.statuses_url + ' ' + value.html_url + ' (' + timeSince(new Date(value.created_at)) +') ' + value.base.ref + ' <~ ' + value.head.ref " --outfmt 'text' | tr ' ' "#"); do

        current_state=$(curl --silent -H "Authorization: token $GITHUB_API_TOKEN" $(echo $pr | tr '#' ' ' | awk '{print $1}') | _underscore reduceRight "value.state" | tr -d '"')
        pr=$(echo $pr | sed 's/^[^#]*#//g')
        case "$current_state" in
            ("success") printf "$GREEN" ;;
            ("failure") printf "$RED" ;;
            ("pending") printf "$YELLOW" ;;
            (*) printf "$LIGHT_GRAY" ;;
        esac

        printf $pr | tr '#' ' '
        echo "$LIGHT_GRAY"

    done
}


