#!/usr/bin/python3
# Use the system installed python3 rather than requiring a version potentially installed via asdf

# asdf-tidy - A script to tidy up asdf versions
# This script checks for unused and missing versions of tools managed by asdf.
# It will prompt the user to uninstall unused versions and install missing versions.

import subprocess
import os
import sys

def strip_stars(version):
  return version.replace('*', '').strip()

def find_tool_version_paths_in(dirname):
  dirname = os.path.expanduser(dirname)
  version_files = subprocess.run(['find', dirname, '-maxdepth', '3', '-name', '.tool-versions'], stdout=subprocess.PIPE, text=True)
  versions_in_use = version_files.stdout.splitlines()
  return versions_in_use

def get_installed_versions(tool_name):
  result = subprocess.run(['asdf', 'list', tool_name], stdout=subprocess.PIPE, text=True)
  versions = [strip_stars(line) for line in result.stdout.splitlines()]
  return versions

def get_in_use_versions_by_tool_name():
  global_paths = [os.path.expanduser('~/.tool-versions')]
  tool_version_paths = global_paths + find_tool_version_paths_in('~/wrk') + find_tool_version_paths_in('~/src')

  in_use_map = {}

  for path in tool_version_paths:
    try:
      with open(path, 'r') as file:
        lines = file.readlines()
        for line in lines:
          tool_name, tool_version = line.strip().split(maxsplit=1)
          tool_version = strip_stars(tool_version)
          versions_in_use = in_use_map.get(tool_name, [])
          versions_in_use.append(tool_version)
          in_use_map[tool_name] = list(set(versions_in_use))
    except FileNotFoundError:
      print(f"Skipped {path}", file=sys.stderr)

  return in_use_map

if __name__ == "__main__":
  in_use_map = get_in_use_versions_by_tool_name()

  uninstall_commands = []
  install_missing_commands = []

  for tool_name, versions in in_use_map.items():
    print(f'Checking {tool_name}...')
    installed_versions = get_installed_versions(tool_name)

    versions.sort()
    installed_versions.sort()

    print(f'     In-Use: {", ".join(versions)}')
    print(f'  Installed: {", ".join(installed_versions)}')

    unused = set(installed_versions) - set(versions)
    print(f'  Unused: {", ".join(unused)}')

    missing = set(versions) - set(installed_versions)
    print(f'  Missing: {", ".join(missing)}')

    for v in unused:
      uninstall_commands.append(f'asdf uninstall {tool_name} {v}')

    for v in missing:
      install_missing_commands.append(f'asdf install {tool_name} {v}')

  if uninstall_commands:
    response = input("ðŸ§¹ Do you want to uninstall unused versions? (y/n): ").strip().lower()
    if response in ['y', 'yes']:
      for c in uninstall_commands:
        print(f'> {c}')
        subprocess.run(c, shell=True)

  if install_missing_commands:
    response = input("ðŸ”§ Do you want to install missing versions? (y/n): ").strip().lower()
    if response in ['y', 'yes']:
      for c in install_missing_commands:
        print(f'> {c}')
        subprocess.run(c, shell=True)
