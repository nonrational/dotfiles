#!/usr/bin/env python

# Note: You probably want to set a global python version before running this script.
#
# asdf install python latest
# asdf global python latest

import subprocess
import os

def strip_stars(version):
  return version.replace('*', '').strip()

def find_tool_version_paths_in(dirname):
  dirname = os.path.expanduser(dirname)
  version_files = subprocess.run(['find', dirname, '-maxdepth', '3', '-name', '.tool-versions'], stdout=subprocess.PIPE, text=True)
  versions_in_use = version_files.stdout.splitlines()
  return versions_in_use

def get_installed_versions(tool_name):
  result = subprocess.run(['asdf', 'list', tool_name], stdout=subprocess.PIPE, text=True)
  versions = [strip_stars(line) for line in result.stdout.splitlines()]
  return versions

def get_in_use_versions_by_tool_name():
  global_paths = [os.path.expanduser('~/.tool-versions')]
  tool_version_paths = global_paths + find_tool_version_paths_in('~/wrk') + find_tool_version_paths_in('~/src')

  in_use_map = {}

  for path in tool_version_paths:
    with open(path, 'r') as file:
      lines = file.readlines()
      for line in lines:
        tool_name, tool_version = line.strip().split()
        tool_version = strip_stars(tool_version)
        versions_in_use = in_use_map.get(tool_name, [])
        versions_in_use.append(tool_version)
        in_use_map[tool_name] = list(set(versions_in_use))

  return in_use_map

if __name__ == "__main__":
  in_use_map = get_in_use_versions_by_tool_name()

  commands = []

  for tool_name, versions in in_use_map.items():
    print(f'Checking {tool_name}...')
    installed_versions = get_installed_versions(tool_name)

    print(f'     In-Use: {", ".join(versions)}')
    print(f'  Installed: {", ".join(installed_versions)}')

    unused = set(installed_versions) - set(versions)

    print(f'  Unused: {", ".join(unused)}')

    for v in unused:
      commands.append(f'asdf uninstall {tool_name} {v}')

  if commands:
    response = input("ðŸ§¹ Do you want to uninstall the unused versions? (y/n): ").strip().lower()
    if response in ['y', 'yes']:
      for c in commands:
        print(f'> {c}')
        subprocess.run(c, shell=True)
  else:
    print("âœ¨ No unused versions to uninstall.")
